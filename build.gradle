plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.google.cloud.tools.jib' version '3.4.3'
	id 'maven-publish'
	id 'net.researchgate.release' version '3.0.2'
}

group = 'com.cludus'
description = 'Tool for importing and exporting data from various databases'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

def ghUser = System.getenv().getOrDefault('GH_USER', '')
def ghPass = System.getenv().getOrDefault('GH_PASS', '')

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		name = "GitHubPackages"
		url = uri("https://maven.pkg.github.com/cludus/maven")
		credentials {
			username = ghUser
			password = ghPass
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
	implementation 'org.springframework.boot:spring-boot-starter-data-couchbase'
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation "org.springdoc:springdoc-openapi-starter-common:2.2.0"
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.oracle.database.jdbc:ojdbc11'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.apache.derby:derby'
	runtimeOnly 'org.apache.derby:derbytools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.testcontainers:cassandra'
	testImplementation 'org.testcontainers:couchbase'
	testImplementation 'org.testcontainers:elasticsearch'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	testImplementation 'org.testcontainers:mariadb'
	testImplementation 'org.testcontainers:mongodb'
	testImplementation 'org.testcontainers:mssqlserver'
	testImplementation 'org.testcontainers:mysql'
	testImplementation 'org.testcontainers:neo4j'
	testImplementation 'org.testcontainers:oracle-free'
	testImplementation 'org.testcontainers:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}


tasks.named('processResources') {
	expand(project.properties)
}

release {
	tagTemplate = '${version}'
}

tasks.named('afterReleaseBuild') {
	dependsOn tasks.jib
}

jib {
	from {
		image = 'amazoncorretto:21'
	}
	to {
		image = 'ghcr.io/cludus/clugest'
		tags = ["$version", 'latest']
		auth {
			username = ghUser
			password = ghPass
		}
	}
	container {
		jvmFlags = ['-Xms1024M', '-Xmx3g']
		mainClass = 'com.cludus.clugest.DemoApplication'
		ports = ['8080']
		format = 'OCI'
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/cludus/clugest"
			credentials {
				username = ghUser
				password = ghPass
			}
		}
	}
}