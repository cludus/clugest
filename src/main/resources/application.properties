spring.config.import=optional:file:.env[.properties]
spring.application.name=clugest
info.app.name=${name}
info.app.description=${project.description}
info.app.version=${project.version}
spring.output.ansi.enabled=always
spring.profiles.active=\${ACTIVE_PROFILES:}
server.port=${PORT:8080}

# management
management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.endpoint.health.probes.enabled=true
management.info.env.enabled=true
management.endpoints.web.cors.allowed-origins=\${ALLOWED_ORIGIN_PATTERNS:}
management.endpoints.web.cors.allowed-methods=GET,POST

# liquidbase
spring.liquibase.enabled=\${LIQUIBASE_ENABLED:false}
spring.liquibase.clear-checksums=\${LIQUIBASE_CLEAR_CHECKSUM:false}
spring.liquibase.driver-class-name=\${JDBC_DRIVER:}
spring.liquibase.url=\${JDBC_URL:}
spring.liquibase.user=\${JDBC_USERNAME:false}
spring.liquibase.password=\${JDBC_PASSWORD:false}
spring.liquibase.change-log=db/changelog-master.xml

# jpa
spring.datasource.driver-class-name=\${JDBC_DRIVER:}
spring.datasource.url=\${JDBC_URL:}
spring.datasource.username=\${JDBC_USERNAME:}
spring.datasource.password=\${JDBC_PASSWORD:}

# jpa hikari
spring.datasource.hikari.minimum-idle=\${HIKARI_MINIMUM_IDLE:1}
spring.datasource.hikari.maximum-pool-size=\${HIKARI_MAXIMUM_POOL_SIZE:10}
spring.datasource.hikari.connection-timeout=\${HIKARI_CONNECTION_TIMEOUT:20000}
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true

# Hibernate additional native properties to set on the JPA provider.
spring.jpa.properties.hibernate.dialect=\${HIBERNATE_DIALECT:}
spring.jpa.properties.hibernate.current_session_context_class=thread
spring.jpa.properties.hibernate.format_sql=true

# Fix Postgres JPA Error (Method org.postgresql.jdbc.PgConnection.createClob() is not yet implemented).
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# mongodb
spring.data.mongodb.uri=\${MONGODB_URI:}
spring.data.mongodb.username=\${MONGODB_USERNAME:}
spring.data.mongodb.password=\${MONGODB_PASSWORD:}
spring.data.mongodb.authentication-database=\${MONGODB_ADMIN_DB:admin}

# elasticsearch
spring.data.elasticsearch.repositories.enabled=true
spring.elasticsearch.uris=\${ELASTICSEARCH_URIS:}
spring.elasticsearch.username=\${ELASTICSEARCH_USERNAME:}
spring.elasticsearch.password=\${ELASTICSEARCH_PASSWORD:}

# neo4j
spring.neo4j.uri=\${NEO4J_URI:}
spring.neo4j.authentication.username=\${NEO4J_USERNAME:}
spring.neo4j.authentication.password=\${NEO4J_PASSWORD:}
spring.data.neo4j.repositories.type=auto

# cassandra
spring.cassandra.contact-points=\${CASSANDRA_CONTACT_POINTS:}
spring.cassandra.username=\${CASSANDRA_USERNAME:}
spring.cassandra.password=\${CASSANDRA_PASSWORD:}
spring.cassandra.keyspace-name=\${CASSANDRA_KEYSPACE:}
spring.cassandra.local-datacenter=\${CASSANDRA_LOCAL_DC:}
spring.data.cassandra.repositories.type=imperative
spring.cassandra.schema-action=create_if_not_exists

# kafka
spring.kafka.bootstrap-servers=\${KAFKA_BOOTSTRAP_SERVERS:}

spring.kafka.admin.auto-create=true
spring.kafka.admin.client-id=\${KAFKA_ADMIN_CLIENT_ID:}

# kafka consumer
spring.kafka.consumer.client-id=\${KAFKA_CONSUMER_CLIENT_ID:}
spring.kafka.consumer.group-id=\${KAFKA_CONSUMER_GROUP_ID:}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# kafka producer
spring.kafka.producer.client-id=\${KAFKA_PRODUCER_CLIENT_ID:}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# redis
spring.data.redis.host=\${REDIS_HOST:}

